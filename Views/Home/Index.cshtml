@using Microsoft.AspNetCore.Identity
@using KPI_Dashboard.Models
@inject UserManager<ApplicationUser> UserManager

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>KPI Dashboard</title>
    <!-- Bootstrap CSS for styling -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            background-image: url('/images/bg.png');
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
            background-position: center;
        }

        .container {
            background: rgba(255,255,255,0.85);
            border-radius: 12px;
            padding: 2rem;
            margin-top: 2rem;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <!-- Display a welcome message with the user's name if authenticated, otherwise show 'Guest' -->
        <h1 class="text-center">
            Welcome, @(User.Identity?.IsAuthenticated == true ? (await UserManager.GetUserAsync(User))?.Name ?? "Guest" : "Guest")!
        </h1>

        <!-- Show a success message if one exists in TempData, then clear it -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success text-center" role="alert">
                @TempData["SuccessMessage"]
                @{
                    TempData["SuccessMessage"] = null; // Clear the message after displaying
                }
            </div>
        }

        @{
            // Get the current user and check their roles
            var user = await UserManager.GetUserAsync(User);
            var isAdmission = user != null && await UserManager.IsInRoleAsync(user, "Admission");
            var isVisa = user != null && await UserManager.IsInRoleAsync(user, "Visa");
            var isAdmin = user != null && await UserManager.IsInRoleAsync(user, "Admin");
        }

        <!-- Flexbox container for buttons -->
        <div class="d-flex flex-wrap justify-content-center gap-3 mt-4">
            @if (isAdmission)
            {
                <a asp-controller="AdmissionKPI" asp-action="Create" class="btn btn-primary p-3 flex-fill text-center" style="min-width:220px;max-width:300px;">Enter Admission KPI</a>
            }
            @if (isVisa)
            {
                <a asp-controller="VisaKPI" asp-action="Create" class="btn btn-primary p-3 flex-fill text-center" style="min-width:220px;max-width:300px;">Enter Visa KPI</a>
            }
            @if (isAdmin || isAdmission || isVisa)
            {
                <a asp-controller="Dashboard" asp-action="Index" class="btn btn-success p-3 flex-fill text-center" style="min-width:220px;max-width:300px;">View Dashboard</a>
            }
            @if (isAdmin)
            {
                <a asp-controller="Admin" asp-action="Index" class="btn btn-info p-3 flex-fill text-center" style="min-width:220px;max-width:300px;">User Management</a>
                <a asp-controller="KPI" asp-action="EditList" class="btn btn-warning p-3 flex-fill text-center" style="min-width:220px;max-width:300px;">Edit KPI</a>
                <a asp-controller="KPITargets" asp-action="Index" class="btn btn-info p-3 flex-fill text-center" style="min-width:220px;max-width:300px;">Manage KPI Targets</a>
            }
        </div>
    </div>
    <!-- Bootstrap JS for interactive components -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
